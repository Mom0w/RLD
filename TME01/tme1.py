# -*- coding: utf-8 -*-
"""TME1.ipynb

Automatically generated by Colaboratory.

"""

import pandas as pd 
import matplotlib.pyplot as plt
import numpy as np
import random

random.random()

data = pd.read_csv("CTR.txt",sep=":",header=None)
id = data[0]
contexte = data[1].str.split(";",expand=True).astype(float)
taux = data[2].str.split(";",expand=True).astype(float)

N = len(taux)

"""**BASELINE RANDOM**"""

compteur_annonce_Random = np.zeros(10)
reward_cum = 0 
list_reward_random = [] 
list_choix_Random = []
for i in range(N):
    choix = np.random.randint(0,10)
    list_choix_Random.append(choix)
    compteur_annonce_Random[choix] += 1 
    reward_cum += taux[choix][i]
    list_reward_random.append(reward_cum)
reward_cum

"""**BASELINE STATICBEST**"""

compteur_annonce_StaticBest = np.zeros(10)
reward_cum = 0 
somme_empirique = np.zeros(10)
list_reward_StaticBest = [] 
list_choix_StaticBest = []

for i in range(N):
    for j in range(10):
        somme_empirique[j] += taux[j][i]
    choix = np.argmax(somme_empirique)
    list_choix_StaticBest.append(choix)
    compteur_annonce_StaticBest[choix] += 1 
    reward_cum += taux[choix][i]
    list_reward_StaticBest.append(reward_cum)
reward_cum

"""**BASELINE OPTIMALE**"""

compteur_annonce_Optimale = np.zeros(10)
reward_cum = 0
list_reward_Optimale = []
list_choix_Optimale = []
for i in range(N):
    choix = np.argmax(taux[i:(i+1)])
    list_choix_Optimale.append(choix)
    compteur_annonce_Optimale[choix] += 1 
    reward_cum += taux[choix][i]
    list_reward_Optimale.append(reward_cum)
reward_cum

"""**ALGORITHME UCB**"""

compteur_annonce_UCB = np.zeros(10)
reward_cum = 0 
somme_empirique = np.zeros(10)
B = np.zeros(10)
list_reward_UCB = []
list_choix_UCB = []
for i in range(10):
    somme_empirique[i] = taux[i][i]
    list_choix_UCB.append(i)
    compteur_annonce_UCB[i] += 1 
    reward_cum += somme_empirique[i]
    list_reward_UCB.append(reward_cum)
    
for i in range(10,N):
    
    B = np.divide(somme_empirique,compteur_annonce_UCB) + np.sqrt(2*np.log(i)/(compteur_annonce_UCB))
    choix = np.argmax(B)
    list_choix_UCB.append(choix)
    compteur_annonce_UCB[choix] += 1 
    somme_empirique[choix] += taux[choix][i]
    reward_cum += taux[choix][i]
    list_reward_UCB.append(reward_cum)
reward_cum

"""**LinUCB**"""

alpha = 0.1
A = np.array([np.identity(5) for i in range(10)])
b = np.array([np.zeros((5,1)) for i in range(10)])
theta = np.array([np.zeros((5,1)) for i in range(10)])
p = np.zeros(10)
x = np.zeros((5,1))
reward_cum = 0
compteur_annonce_LinUCB = np.zeros(10)
list_reward_LinUCB = []
list_choix_LinUCB = []
for i in range(N):
    x = np.array(contexte.loc[i,:]).reshape(5,1) #ligne i du contexte pour tout les bras 
    for a in range(10):
        inv_A = np.linalg.inv(A[a])
        theta[a] = inv_A@b[a]
        p[a] = (theta[a].T)@x + alpha*np.sqrt(x.T@inv_A@x)
    
    choix = np.argmax(p)
    list_choix_LinUCB.append(choix)
    #compteur_annonce_LinUCB[choix] += 1
    reward_cum += taux.loc[i,choix]
    list_reward_LinUCB.append(reward_cum)
    A[choix] +=  x@x.T
    b[choix] += taux.loc[i,choix]*x
reward_cum

compteur_annonce_greedyUCB = np.zeros(10)
reward_cum = 0 
somme_empirique = np.zeros(10)
B = np.zeros(10)
list_reward_greedyUCB = []
list_choix_greedyUCB = []
gred_epsilon = 0.01
for i in range(10):
    somme_empirique[i] = taux[i][i]
    list_choix_greedyUCB.append(i)
    compteur_annonce_greedyUCB[i] += 1 
    reward_cum += somme_empirique[i]
    list_reward_greedyUCB.append(reward_cum)
    
for i in range(10,N):
    
    B = np.divide(somme_empirique,compteur_annonce_greedyUCB) + np.sqrt(2*np.log(i)/(compteur_annonce_greedyUCB))
    if(random.random()>gred_epsilon):
        choix = np.argmax(B)
    else:
        choix = np.random.randint(0,10)
    list_choix_greedyUCB.append(choix)
    compteur_annonce_greedyUCB[choix] += 1 
    somme_empirique[choix] += taux[choix][i]
    reward_cum += taux[choix][i]
    list_reward_greedyUCB.append(reward_cum)
reward_cum

fig1,ax = plt.subplots(1,1,figsize=(15,15))
plt.plot(list_reward_random,label='Random')
plt.plot(list_reward_StaticBest,label='StaticBest')
plt.plot(list_reward_Optimale,label='Optimale')
plt.plot(list_reward_UCB,label='UCB')
plt.plot(list_reward_greedyUCB,label='greedyUCB')
plt.plot(list_reward_LinUCB,label='LinUCB')
ax.legend(loc='best')
#ax.set_title("Comparaison des rewards obtenus")
plt.xlabel("Numéro de l'article")
plt.ylabel("Reward cumulés")

fig2,axs = plt.subplots(3,2,figsize=(15,15))


axs[0,0].hist(list_choix_Random,bins=10,label="Random")
axs[0,1].hist(list_choix_StaticBest,bins=10,label="StaticBest")
axs[1,0].hist(list_choix_Optimale,bins=10,label="Optimale")
axs[1,1].hist(list_choix_UCB,bins=10,label="UCB")
axs[2,0].hist(list_choix_LinUCB,bins=10,label="LinUCB")

axs[0,0].legend(loc='best')
axs[0,1].legend(loc='best')
axs[1,0].legend(loc='best')
axs[1,1].legend(loc='best')
axs[2,0].legend(loc='best')

axs[0,0].set_title("Fréquence annonceurs Random")
axs[0,1].set_title("Fréquence annonceurs StaticBest")
axs[1,0].set_title("Fréquence annonceurs Optimale")
axs[1,1].set_title("Fréquence annonceurs UCB")
axs[2,0].set_title("Fréquence annonceurs LinUCB")



