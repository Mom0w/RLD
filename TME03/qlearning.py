# -*- coding: utf-8 -*-
"""QLearning.ipynb

Automatically generated by Colaboratory.

"""



import matplotlib.pyplot as plt 
import gym
#import gridworld
from gym import wrappers, logger
import numpy as np
import copy
from datetime import datetime
import os
from utils import *
from collections import defaultdict
import gridworld

def make_config(configName, map = 1, sarsa = 'false', nbEpisodes = 1000,exploMode =0, gamma=0.99,learningRate=0.1):

    text = ["env: gridworld-v0",
          "map: gridworldPlans/plan"+str(map)+".txt",
          "rewards : {0: -0.001, 3: 1, 4: 1, 5: -1, 6: -1}",
          "seed: 5",                                 
          "freqSave: 1000"  ,                                                                      # frequence de sauvegarde du modèle
          "freqTest: 100 " ,                                                                        # frequence de test
          "nbTest: 1     "  ,                                                                      # nb de tests à effectuer tous les freqTest trajectoires
          "freqVerbose: 1000",                                                                       # frequence d'affichage de l'environnement

          "nbEpisodes: "+str(nbEpisodes),
          "maxLengthTest: 500"  ,                                                                  # Longueur maxi des trajectoires en Test
          "maxLengthTrain: 100"  ,                                                                 # Longueur maxi des trajectoires en Train

          "exploMode: "+str(exploMode)   ,                                                                       # Mode d'exploration. 0 = epsilon-greedy (les autres a regarder je sais plus)
          "explo: 0.1 "    ,                                                                       # coefficient d'exploration initial
          "decay: 0.999"     ,                                                                     # a la fin de chaque trajectoire, le coefficient d'explo est multiplié par ce facteur
          "gamma: "+str(gamma)      ,                                                                     # Facteur de discount
          "learningRate: " + str(learningRate)  ,                                                                  # Pas d'apprentissage
          "eligibility: 0" ,                                                                       # coefficient d'eligibilité (le lambda du Q(lambda))
          "eligibilityThreshold: 0"     ,                                                          # en dessous de ce niveau de score d'eligibilité on coupe (pour aller plus vite)
          "sarsa: "+sarsa  ,                                                                      # si true = sarsa, sinon qlearning
          "nbModelSamples: 0"     ,                                                                # si > 0, dynaQ avec nbModelSamples echantillons issus du modèle apres chaque evenement

          "execute: | ",
          ' env.setPlan(config["map"], config["rewards"])']
    with open(configName,'w') as f:

        f.write('\n'.join(text))
    return configName

class QLearning(object):
    def __init__(self, env, opt):
        self.opt=opt
        self.env=env

        self.action_space = env.action_space
        self.discount=opt.gamma
        self.alpha=opt.learningRate
        self.explo=opt.explo
        self.decay = opt.decay
        self.exploMode=opt.exploMode #0: epsilon greedy, 1: ucb
        self.sarsa=opt.sarsa

        
        self.modelSamples=opt.nbModelSamples
        self.test=False
        self.qstates = {}  # dictionnaire d'états rencontrés
        self.values = []   # contient, pour chaque numéro d'état, les qvaleurs des self.action_space.n actions possibles

    def save(self,file):
        pass
    # enregistre cette observation dans la liste des états rencontrés si pas déjà présente
    # retourne l'identifiant associé à cet état
    def storeState(self,obs):
        observation = obs.dumps()
        s = str(observation)
        ss = self.qstates.get(s, -1)

        # Si l'etat jamais rencontré
        if ss < 0:
            ss = len(self.values)
            self.qstates[s] = ss
            self.values.append(np.ones(self.action_space.n) * 1.0) # Optimism faced to uncertainty (on commence avec des valeurs à 1 pour favoriser l'exploration)
        return ss

    def act(self, obs):
        if (self.exploMode == 0): #epsilon greedy
            if (np.random.uniform() > self.explo):
                self.explo*= self.decay
                return np.argmax(self.values[obs])
            else:
                self.explo*= self.decay
                return self.action_space.sample()
        else: #TODO version UCB
            return np.argmax(self.values[obs])

    def store(self, ob, action, new_ob, reward, done, it):

        if self.test:
            return
        self.last_source=ob
        self.last_action=action
        self.last_dest=new_ob
        self.last_reward=reward
        if it == self.opt.maxLengthTrain:   # si on a atteint la taille limite, ce n'est pas un vrai done de l'environnement
            done = False
        self.last_done=done



    def learn(self,done):
        coeff_fin_force = 1 - self.last_done
        if(self.sarsa):
            Q = self.values[self.last_dest][self.act(self.last_dest)]
        else:
            Q = np.max(self.values[self.last_dest])

        self.values[self.last_source][self.last_action] += self.alpha* \
           (self.last_reward + self.discount*Q*coeff_fin_force -\
                self.values[self.last_source][self.last_action] )

class DynaQ(object):
    def __init__(self, env, opt):
        self.opt=opt
        self.env=env

        self.action_space = env.action_space
        self.discount=opt.gamma
        self.alpha=opt.learningRate
        self.explo=opt.explo
        self.decay = opt.decay
        self.exploMode=opt.exploMode #0: epsilon greedy, 1: ucb
        

        
        self.modelSamples=1000
        self.test=False
        self.qstates = {}  # dictionnaire d'états rencontrés
        self.values = []   # contient, pour chaque numéro d'état, les qvaleurs des self.action_space.n actions possibles
        
        
        self.model = {}

    def save(self,file):
        pass
    # enregistre cette observation dans la liste des états rencontrés si pas déjà présente
    # retourne l'identifiant associé à cet état
    def storeState(self,obs):
        observation = obs.dumps()
        s = str(observation)
        ss = self.qstates.get(s, -1)

        # Si l'etat jamais rencontré
        if ss < 0:
            ss = len(self.values)
            self.qstates[s] = ss
            self.values.append(np.ones(self.action_space.n) * 1.0) # Optimism faced to uncertainty (on commence avec des valeurs à 1 pour favoriser l'exploration)
        
        return ss

    def act(self, obs):
        if (self.exploMode == 0): #epsilon greedy
            if (np.random.uniform() > self.explo):
                self.explo*= self.decay
                return np.argmax(self.values[obs])
            else:
                self.explo*= self.decay
                return self.action_space.sample()
        else: #TODO version UCB
            return np.argmax(self.values[obs])

    def store(self, ob, action, new_ob, reward, done, it):

        if self.test:
            return
        self.last_source=ob
        self.last_action=action
        self.last_dest=new_ob
        self.last_reward=reward
        if it == self.opt.maxLengthTrain:   # si on a atteint la taille limite, ce n'est pas un vrai done de l'environnement
            done = False
        self.last_done=done

    def add2model(self,past_state, past_action, state, reward):
        if not past_state in self.model:
            self.model[past_state] = {}
        if not past_action in self.model[past_state]:
            self.model[past_state][past_action] = {}
    
        self.model[past_state][past_action] = (state,reward)

    def learn(self,done):
        coeff_fin_force = 1 - self.last_done
        Q = np.max(self.values[self.last_dest])

        self.values[self.last_source][self.last_action] += self.alpha* \
           (self.last_reward + self.discount*Q*coeff_fin_force -\
                self.values[self.last_source][self.last_action] )
           
        
        self.add2model(self.last_source,self.last_action,self.last_dest,self.last_reward)
        for i in range(self.modelSamples):
            s = np.random.choice(list(self.model.keys()))
            a = np.random.choice(list(self.model[s].keys()))
            (s_prime,r) = self.model[s][a]



            self.values[s][a] += self.alpha*(r + self.discount*np.max(self.values[s_prime]) - self.values[s][a])

def main(config_file,name,agentClass):
    env, config, outdir, logger = init(config_file,name)

    freqTest = config["freqTest"]
    freqSave = config["freqSave"]
    nbTest = config["nbTest"]
    env.seed(config["seed"])
    np.random.seed(config["seed"])
    episode_count = config["nbEpisodes"]

    agent = agentClass(env,config)

    rsum = 0
    mean = 0
    verbose = True
    itest = 0
    reward = 0
    done = False
    nb = 0
    for i in range(episode_count):
        checkConfUpdate(outdir, config)  # permet de changer la config en cours de run

        rsum = 0
        ob = env.reset()

        if (i > 0 and i % int(config["freqVerbose"]) == 0):
            verbose = True
        else:
            verbose = False

        if i % freqTest == 0 and i >= freqTest:  ##### Si agent.test alors retirer l'exploration
            print("Test time! ")
            mean = 0
            agent.test = True

        if i % freqTest == nbTest and i > freqTest:
            print("End of test, mean reward=", mean / nbTest)
            itest += 1
            logger.direct_write("rewardTest", mean / nbTest, itest)
            agent.test = False

        if i % freqSave == 0:
            agent.save(outdir + "/save_" + str(i))


        if(i%5000 == 0):
            print(outdir)

        j = 0
        if verbose:
          #env.render()
          pass
        new_ob = agent.storeState(ob)
        while True:
            if verbose:
              #env.render()
              pass

            ob = new_ob
            action = agent.act(ob)
            new_ob, reward, done, _ = env.step(action)
            new_ob = agent.storeState(new_ob)

            j += 1

            if ((config["maxLengthTrain"] > 0) and (not agent.test) and (j == config["maxLengthTrain"])) or (
                      (agent.test) and (config["maxLengthTest"] > 0) and (j == config["maxLengthTest"])):
                  done = True
                  # print("forced done!")

            agent.store(ob, action, new_ob, reward, done, j)
            agent.learn(done)
            rsum += reward
            if done:
                print(str(i) + " rsum=" + str(rsum) + ", " + str(j) + " actions ")
                logger.direct_write("reward", rsum, i)
                mean += rsum
                break
    env.close()
    return outdir

if __name__ == "__main__":
    outdirs = []
    list_class = [#QLearning,
                DynaQ
                ]
    list_name = [#"QLearning",
               "DynaQ"
               ]
    #maps = range(11)
    maps = [1]
    sarsa = ['false',
           'true'
           ]


    for map in maps:
        for agent_class,agent_name in zip(list_class,list_name):
              for version in sarsa:
                if(agent_name=="DynaQ" and version=="true"):
                      break
                print("######CHANGEMENT######\n")
                print(agent_name+"_"+version+"_"+str(map))
                file_config = make_config(agent_name+"_"+version+"_"+str(map)+".yaml",map,version,500)
                outdir = main(file_config,agent_name+"_"+version+"_"+str(map),agent_class)
                outdirs.append(outdir)


# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir=./XP/gridworld-v0/DynaQ_false_1_19-12-2021-20H07-38S

